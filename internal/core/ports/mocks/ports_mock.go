// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/ports.go -destination=internal/core/ports/mocks/ports_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "github.com/posilva/simpleboards/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepository) Add(entry, leaderboard string, value float64) (domain.ScoreUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", entry, leaderboard, value)
	ret0, _ := ret[0].(domain.ScoreUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryMockRecorder) Add(entry, leaderboard, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), entry, leaderboard, value)
}

// Last mocks base method.
func (m *MockRepository) Last(entry, leaderboard string, value float64) (domain.ScoreUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", entry, leaderboard, value)
	ret0, _ := ret[0].(domain.ScoreUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockRepositoryMockRecorder) Last(entry, leaderboard, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockRepository)(nil).Last), entry, leaderboard, value)
}

// Max mocks base method.
func (m *MockRepository) Max(entry, leaderboard string, value float64) (domain.ScoreUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Max", entry, leaderboard, value)
	ret0, _ := ret[0].(domain.ScoreUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Max indicates an expected call of Max.
func (mr *MockRepositoryMockRecorder) Max(entry, leaderboard, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Max", reflect.TypeOf((*MockRepository)(nil).Max), entry, leaderboard, value)
}

// Min mocks base method.
func (m *MockRepository) Min(entry, leaderboard string, value float64) (domain.ScoreUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Min", entry, leaderboard, value)
	ret0, _ := ret[0].(domain.ScoreUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Min indicates an expected call of Min.
func (mr *MockRepositoryMockRecorder) Min(entry, leaderboard, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Min", reflect.TypeOf((*MockRepository)(nil).Min), entry, leaderboard, value)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debug", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Error", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// MockLeaderboardsService is a mock of LeaderboardsService interface.
type MockLeaderboardsService struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardsServiceMockRecorder
}

// MockLeaderboardsServiceMockRecorder is the mock recorder for MockLeaderboardsService.
type MockLeaderboardsServiceMockRecorder struct {
	mock *MockLeaderboardsService
}

// NewMockLeaderboardsService creates a new mock instance.
func NewMockLeaderboardsService(ctrl *gomock.Controller) *MockLeaderboardsService {
	mock := &MockLeaderboardsService{ctrl: ctrl}
	mock.recorder = &MockLeaderboardsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardsService) EXPECT() *MockLeaderboardsServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockLeaderboardsService) GetConfig(name string) (domain.LeaderboardConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", name)
	ret0, _ := ret[0].(domain.LeaderboardConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockLeaderboardsServiceMockRecorder) GetConfig(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockLeaderboardsService)(nil).GetConfig), name)
}

// GetResults mocks base method.
func (m *MockLeaderboardsService) GetResults(name string, epoch int64) ([]domain.LeaderboardScores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", name, epoch)
	ret0, _ := ret[0].([]domain.LeaderboardScores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockLeaderboardsServiceMockRecorder) GetResults(name, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockLeaderboardsService)(nil).GetResults), name, epoch)
}

// ListScores mocks base method.
func (m *MockLeaderboardsService) ListScores(name string) ([]domain.LeaderboardScores, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScores", name)
	ret0, _ := ret[0].([]domain.LeaderboardScores)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListScores indicates an expected call of ListScores.
func (mr *MockLeaderboardsServiceMockRecorder) ListScores(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockLeaderboardsService)(nil).ListScores), name)
}

// ReportScore mocks base method.
func (m *MockLeaderboardsService) ReportScore(entryID, name string, value float64) (domain.ReportScoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportScore", entryID, name, value)
	ret0, _ := ret[0].(domain.ReportScoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportScore indicates an expected call of ReportScore.
func (mr *MockLeaderboardsServiceMockRecorder) ReportScore(entryID, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportScore", reflect.TypeOf((*MockLeaderboardsService)(nil).ReportScore), entryID, name, value)
}

// MockScoreboard is a mock of Scoreboard interface.
type MockScoreboard struct {
	ctrl     *gomock.Controller
	recorder *MockScoreboardMockRecorder
}

// MockScoreboardMockRecorder is the mock recorder for MockScoreboard.
type MockScoreboardMockRecorder struct {
	mock *MockScoreboard
}

// NewMockScoreboard creates a new mock instance.
func NewMockScoreboard(ctrl *gomock.Controller) *MockScoreboard {
	mock := &MockScoreboard{ctrl: ctrl}
	mock.recorder = &MockScoreboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreboard) EXPECT() *MockScoreboardMockRecorder {
	return m.recorder
}

// AddScore mocks base method.
func (m *MockScoreboard) AddScore(entryID, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScore", entryID, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScore indicates an expected call of AddScore.
func (mr *MockScoreboardMockRecorder) AddScore(entryID, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScore", reflect.TypeOf((*MockScoreboard)(nil).AddScore), entryID, name, value)
}

// Get mocks base method.
func (m *MockScoreboard) Get(name string) ([]domain.ScoreboardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].([]domain.ScoreboardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScoreboardMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScoreboard)(nil).Get), name)
}

// GetRank mocks base method.
func (m *MockScoreboard) GetRank(entryID, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRank", entryID, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRank indicates an expected call of GetRank.
func (mr *MockScoreboardMockRecorder) GetRank(entryID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRank", reflect.TypeOf((*MockScoreboard)(nil).GetRank), entryID, name)
}

// GetTopN mocks base method.
func (m *MockScoreboard) GetTopN(name string, n int64) ([]domain.ScoreboardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopN", name, n)
	ret0, _ := ret[0].([]domain.ScoreboardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopN indicates an expected call of GetTopN.
func (mr *MockScoreboardMockRecorder) GetTopN(name, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopN", reflect.TypeOf((*MockScoreboard)(nil).GetTopN), name, n)
}

// MockProvider is a mock of Provider interface.
type MockProvider[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder[T]
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder[T any] struct {
	mock *MockProvider[T]
}

// NewMockProvider creates a new mock instance.
func NewMockProvider[T any](ctrl *gomock.Controller) *MockProvider[T] {
	mock := &MockProvider[T]{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider[T]) EXPECT() *MockProviderMockRecorder[T] {
	return m.recorder
}

// Provide mocks base method.
func (m *MockProvider[T]) Provide() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockProviderMockRecorder[T]) Provide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockProvider[T])(nil).Provide))
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// Provide mocks base method.
func (m *MockConfigProvider) Provide() (domain.LeaderboardsConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide")
	ret0, _ := ret[0].(domain.LeaderboardsConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockConfigProviderMockRecorder) Provide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockConfigProvider)(nil).Provide))
}

// Refresh mocks base method.
func (m *MockConfigProvider) Refresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh")
}

// Refresh indicates an expected call of Refresh.
func (mr *MockConfigProviderMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockConfigProvider)(nil).Refresh))
}

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigGetter) GetConfig() (domain.LeaderboardsConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(domain.LeaderboardsConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigGetterMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigGetter)(nil).GetConfig))
}

// MockResetLocker is a mock of ResetLocker interface.
type MockResetLocker struct {
	ctrl     *gomock.Controller
	recorder *MockResetLockerMockRecorder
}

// MockResetLockerMockRecorder is the mock recorder for MockResetLocker.
type MockResetLockerMockRecorder struct {
	mock *MockResetLocker
}

// NewMockResetLocker creates a new mock instance.
func NewMockResetLocker(ctrl *gomock.Controller) *MockResetLocker {
	mock := &MockResetLocker{ctrl: ctrl}
	mock.recorder = &MockResetLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetLocker) EXPECT() *MockResetLockerMockRecorder {
	return m.recorder
}

// ResetLock mocks base method.
func (m *MockResetLocker) ResetLock(leaderboar string, epoch int, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLock", leaderboar, epoch, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetLock indicates an expected call of ResetLock.
func (mr *MockResetLockerMockRecorder) ResetLock(leaderboar, epoch, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLock", reflect.TypeOf((*MockResetLocker)(nil).ResetLock), leaderboar, epoch, duration)
}

// MockTelemetryReporter is a mock of TelemetryReporter interface.
type MockTelemetryReporter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryReporterMockRecorder
}

// MockTelemetryReporterMockRecorder is the mock recorder for MockTelemetryReporter.
type MockTelemetryReporterMockRecorder struct {
	mock *MockTelemetryReporter
}

// NewMockTelemetryReporter creates a new mock instance.
func NewMockTelemetryReporter(ctrl *gomock.Controller) *MockTelemetryReporter {
	mock := &MockTelemetryReporter{ctrl: ctrl}
	mock.recorder = &MockTelemetryReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryReporter) EXPECT() *MockTelemetryReporterMockRecorder {
	return m.recorder
}

// ReportCounter mocks base method.
func (m *MockTelemetryReporter) ReportCounter(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportCounter", name, value, tags)
}

// ReportCounter indicates an expected call of ReportCounter.
func (mr *MockTelemetryReporterMockRecorder) ReportCounter(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCounter", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportCounter), name, value, tags)
}

// ReportGauge mocks base method.
func (m *MockTelemetryReporter) ReportGauge(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportGauge", name, value, tags)
}

// ReportGauge indicates an expected call of ReportGauge.
func (mr *MockTelemetryReporterMockRecorder) ReportGauge(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportGauge", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportGauge), name, value, tags)
}

// ReportHistogram mocks base method.
func (m *MockTelemetryReporter) ReportHistogram(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportHistogram", name, value, tags)
}

// ReportHistogram indicates an expected call of ReportHistogram.
func (mr *MockTelemetryReporterMockRecorder) ReportHistogram(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportHistogram", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportHistogram), name, value, tags)
}

// ReportSummary mocks base method.
func (m *MockTelemetryReporter) ReportSummary(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportSummary", name, value, tags)
}

// ReportSummary indicates an expected call of ReportSummary.
func (mr *MockTelemetryReporterMockRecorder) ReportSummary(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSummary", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportSummary), name, value, tags)
}

// SetDefaultTags mocks base method.
func (m *MockTelemetryReporter) SetDefaultTags(tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultTags", tags)
}

// SetDefaultTags indicates an expected call of SetDefaultTags.
func (mr *MockTelemetryReporterMockRecorder) SetDefaultTags(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultTags", reflect.TypeOf((*MockTelemetryReporter)(nil).SetDefaultTags), tags)
}
